{"name":"Roadblock","tagline":"A simple authorization library","body":"# Roadblock\r\n\r\n[![Codeship Status for teamsnap/roadblock](https://www.codeship.io/projects/33848a30-df96-0131-12c9-6668820c1116/status)](https://www.codeship.io/projects/25009)\r\n\r\n[![Gem Version](https://badge.fury.io/rb/roadblock.png)](http://badge.fury.io/rb/roadblock)\r\n[![Code Climate](https://codeclimate.com/github/teamsnap/roadblock.png)](https://codeclimate.com/github/teamsnap/roadblock)\r\n[![Coverage Status](https://coveralls.io/repos/teamsnap/roadblock/badge.png?branch=master)](https://coveralls.io/r/teamsnap/roadblock?branch=master)\r\n[![Dependency Status](https://gemnasium.com/teamsnap/roadblock.png)](https://gemnasium.com/teamsnap/roadblock)\r\n[![License](http://img.shields.io/license/MIT.png?color=green)](http://opensource.org/licenses/MIT)\r\n\r\n[Documentation](http://www.rubydoc.info/gems/roadblock)\r\n\r\nA simple authorization library.\r\n\r\n![Roadblock](http://i.imgur.com/RzJlc7D.jpg)\r\n\r\nRoadblock provides a simple interface for checking if a ruby object has the authority to interact with another object. The most obvious example being if the current user in your rails controller can read/write the object they're attempting to access.\r\n\r\nNearly all authorization libraries require heavy weight configuration and tight integration with Rails. This library was created to provide the simplest solution to the problem without requiring any external dependencies. It doesn't require Rails or any of it's subcomponents and weighs in at less than 100 LOC for the actual implementation (less than 25 LOC if you don't care about authorizer stacks).\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'roadblock'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install roadblock\r\n\r\n## Usage\r\n\r\n```ruby\r\nrequire \"roadblock\"\r\n\r\nclass TeamAuthorizer\r\n  include Roadblock.authorizer\r\n\r\n  def can_read?(team)\r\n    scopes.include?(\"read\") &&\r\n      auth_object.teams.include?(team)\r\n  end\r\n\r\n  def can_write?(team)\r\n    scopes.include?(\"write_teams\") && (\r\n      auth_object.managed_teams.include?(team) ||\r\n      auth_object.owned_teams.include?(team)\r\n    )\r\n  end\r\nend\r\n\r\nscopes = [\"read\", \"write_teams\"] # Optional oauth scopes\r\nauth = TeamAuthorizer.new(current_user, :scopes => scopes)\r\nteam = Team.find(params[:id])\r\n\r\n# Scopes are optional, just don't pass any in if you don't want them.\r\n\r\nauth.can?(:read, team) # or auth.can_read?(team)\r\nauth.can?(:write, team) # or auth.can_write?(team)\r\n\r\n# When using the #can? syntax, you can pass in an enumerable\r\n# #can? will then tell you if the user is able to perform the\r\n# action on all of the objects. `true` they can, `false` they\r\n# cannot.\r\n\r\nteams = Team.where(:sport => :hockey)\r\n\r\nauth.can?(:read, teams)\r\nauth.can?(:write, teams)\r\n```\r\n\r\n### Middleware\r\n\r\n```ruby\r\nrequire \"roadblock\"\r\n\r\nclass TeamAuthorizer\r\n  include Roadblock.authorizer\r\n\r\n  def can_read?(team)\r\n    auth_object.teams.include?(team)\r\n  end\r\nend\r\n\r\nclass AdminAuthorizer\r\n  include Roadblock.authorizer\r\n\r\n  def can?(action, object)\r\n    if auth_object.is_admin?\r\n      true\r\n    else\r\n      yield(object)\r\n    end\r\n  end\r\nend\r\n\r\nstack = Roadblock::Stack.new(current_user, :scopes => scopes)\r\nstack.add(AdminAuthorizer, TeamAuthorizer)\r\n\r\n# Then use stack just as you would a standalone authorizer\r\n\r\nstack.can?(:read, team) # or stack.can_read?(team)\r\nstack.can?(:read, teams) # or stack.can_read?(teams)\r\n```\r\n\r\n## Contributing\r\n\r\n1. Fork it ( http://github.com/teamsnap/roadblock/fork )\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}